{"/":{"title":"Informavore 信息动物","content":"**[ɪnˈfɔːməvɔ:] n. 信息动物**\n- 本站点为 Shyrz 的 Obsidian 仓库生成的发布\n- 主题采用的是 [Papyrus](https://github.com/shyrz/hugo-papyrus)，基于 [Reorx](https://reorx.com/) 的 [PaperModX](https://github.com/reorx/hugo-PaperModX) 开发\n- 当前尚存在诸多不完善之处，将在今后逐步修正\n","lastmodified":"2023-08-15T01:39:21.257497345Z","tags":[]},"/notes/how-to-install-ghost-on-ubuntu-22_04":{"title":"Untitled Page","content":"---\ntitle: \"Ubuntu 22.04 下的 Ghost 安装笔记\"\ndate: \"2023-08-06\"\ndescription: \"\"\ntags: \"Ubuntu, Ghost\"\n---\n系统 Ubuntu 22.04\n\n## 安装 `certbot` \n\n```bash\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:certbot/certbot\nsudo apt update\nsudo apt install certbot\nsudo certbot certonly --standalone -d YOUR_DOMAIN\n```\n\n## 安装 Docker 和 Docker Compose\n\n使用以下命令下载 `docker-compose` 安装文件 (记得将版本号更换为[官方发布](https://github.com/docker/compose/releases)的最新版)\n\n```bash\nmkdir -p ~/.docker/cli-plugins/\ncurl -SL https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose\n```\n\n给下载的安装文件授予权限：\n\n```bash\nchmod +x ~/.docker/cli-plugins/docker-compose\n```\n\n验证是否安装成功：\n\n```bash\ndocker compose version\n```\n\n## 安装 Ghost\n\n```bash\nmkdir ghost \u0026\u0026 cd ghost\n```\n\n创建 `docker-compose.yml` 并在文本编辑器中打开，复制粘贴如下内容：\n\n```yaml\nversion: '3'\nservices:\n\n  ghost:\n    image: ghost:latest\n    restart: always\n    depends_on:\n      - db\n    environment:\n      url: https://example.com\n      database__client: mysql\n      database__connection__host: db\n      database__connection__user: root\n      database__connection__password: YOUR_DATABASE_ROOT_PASSWORD\n      database__connection__database: ghost\n    volumes:\n      - /opt/ghost_content:/var/lib/ghost/content\n\n  db:\n    image: mysql:8\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: YOUR_DATABASE_ROOT_PASSWORD\n    volumes:\n      - /opt/ghost_mysql:/var/lib/mysql\n\n  nginx:\n    build:\n      context: ./nginx\n      dockerfile: Dockerfile\n    restart: always\n    depends_on:\n      - ghost\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n       - /etc/letsencrypt/:/etc/letsencrypt/\n       - /usr/share/nginx/html:/usr/share/nginx/html\n```\n\n\n## 创建 Nginx Docker 镜像\n\nDocker Compose 文件依赖于自定义的 Nginx 镜像。此镜像将与适当的服务器块设置打包在一起。\n\n1. 在 `ghost` 文件夹下创建 `nginx` 文件夹\n\n```bash\nmkdir nginx\n```\n\n2. 创建一个名为 `Dockerfile` 的文件并复制粘贴如下内容：\n\n```dockerfile\nFROM nginx:latest\nCOPY default.conf /etc/nginx/conf.d\n```\n\n3. 创建一个名为 `default.conf` 的文件并复制粘贴如下内容：\n\n```dockerfile\nserver {\n  listen 80;\n  listen [::]:80;\n  server_name YOUR_DOMAIN;\n  # Useful for Let's Encrypt\n  location /.well-known/acme-challenge/ { root /usr/share/nginx/html; allow all; }\n  location / { return 301 https://$host$request_uri; }\n}\n\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2;\n  server_name YOUR_DOMAIN;\n\n  ssl_protocols TLSv1.2;\n  ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA;\n  ssl_prefer_server_ciphers on;\n  ssl_session_cache shared:SSL:10m;\n\n  ssl_certificate     /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;\n\n  location / {\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_pass http://ghost:2368;\n  }\n}\n```\n\n## 运行并测试\n\n```bash\ndocker compose up -d\n```\n\n## 更新镜像\n\n```bash\ndocker compose down \u0026\u0026 docker compose pull \u0026\u0026 docker compose up -d\n```\n\n## 设置定期自签 SSL 证书\n\n在文本编辑器中打开 `crontab`\n\n```bash\nsudo crontab -e\n```\n\n在打开的文件中添加如下一行：\n\n```\n0 23 * * * certbot certonly -n --webroot -w /usr/share/nginx/html -d YOUR_DOMAIN --deploy-hook='docker exec ghost_nginx_1 nginx -s reload'\n```\n\n你也可以通过 `--dry-run` 选项测试新添加的定时命令\n\n```bash\nsudo bash -c \"certbot certonly -n --webroot -w /usr/share/nginx/html -d example.com --deploy-hook='docker exec ghost_nginx_1 nginx -s reload'\"\n```","lastmodified":"2023-08-15T01:39:21.257497345Z","tags":[]}}